package org.apache.predictionio.controller;
/** Mix in and implement this trait if your model cannot be persisted by
 * PredictionIO automatically. A companion object extending
 * IPersistentModelLoader is required for PredictionIO to load the persisted
 * model automatically during deployment.
 * <p>
 * Notice that models generated by {@link PAlgorithm} cannot be persisted
 * automatically by nature and must implement these traits if model persistence
 * is desired.
 * <p>
 * <pre><code>
 * class MyModel extends PersistentModel[MyParams] {
 *   def save(id: String, params: MyParams, sc: SparkContext): Boolean = {
 *     ...
 *   }
 * }
 *
 * object MyModel extends PersistentModelLoader[MyParams, MyModel] {
 *   def apply(id: String, params: MyParams, sc: Option[SparkContext]): MyModel = {
 *     ...
 *   }
 * }
 * </code></pre>
 * <p>
 * In Java, all you need to do is to implement this interface, and add a static
 * method with 3 arguments of type String, {@link Params}, and SparkContext.
 * <p>
 * <pre><code>
 * public class MyModel implements PersistentModel&lt;MyParams&gt;, Serializable {
 *   ...
 *   public boolean save(String id, MyParams params, SparkContext sc) {
 *     ...
 *   }
 *
 *   public static MyModel load(String id, Params params, SparkContext sc) {
 *     ...
 *   }
 *   ...
 * }
 * </code></pre>
 * <p>
 * @tparam AP Algorithm parameters class.
 * @see PersistentModelLoader
 * @group Algorithm
 */
public  interface PersistentModel<AP extends org.apache.predictionio.controller.Params> {
  /** Save the model to some persistent storage.
   * <p>
   * This method should return true if the model has been saved successfully so
   * that PredictionIO knows that it can be restored later during deployment.
   * This method should return false if the model cannot be saved (or should
   * not be saved due to configuration) so that PredictionIO will re-train the
   * model during deployment. All arguments of this method are provided by
   * automatically by PredictionIO.
   * <p>
   * @param id ID of the run that trained this model.
   * @param params Algorithm parameters that were used to train this model.
   * @param sc An Apache Spark context.
   * @return (undocumented)
   */
  public  boolean save (java.lang.String id, AP params, org.apache.spark.SparkContext sc)  ;
}
